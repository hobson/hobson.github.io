<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hobson's Blog</title>
    <description>A blog about Data Science, Python, AI, ... basically life.</description>
    <link>http://localhost:4000</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Word Patterns</title>
        <description>&lt;p&gt;Word patterns are what you can use to match or generate phrases. They’re usually called grammars, in math and computer science courses. But this post is about word grammars rather than character grammars. And the word grammar means something very precise to a lot of people, so I don’t want to step on any toes by using the word incorrectly. So I’ll just talk about word patterns.&lt;/p&gt;

&lt;p&gt;Word patterns work best on short, focused text documents, so I’m going to talk about word patterns for sentences, sometimes called &lt;em&gt;phrase structure grammars&lt;/em&gt; (PSGs).&lt;/p&gt;

&lt;p&gt;And word patterns are useful for 2 things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;matching&lt;/li&gt;
  &lt;li&gt;generating&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;em&gt;matching&lt;/em&gt; part is mostly used to extract information, like a name, date, or serial number. It can also be used to measure well-formedness (grammatical correctness), but that can be hard. It’s hard to compose formal grammar rules that capture all the possible well-formed sentences without accidentally including some bad sentences. Natural language grammars depend on the meaning of words. And that isn’t easily captured in formal word patterns. The matching part can also be used to &lt;em&gt;search&lt;/em&gt; within a lot of sentences to narrow your sentences down to a few that match your pattern and use that to make some decisions, like what your chatbot should say in response.&lt;/p&gt;

&lt;p&gt;That brings us to the &lt;em&gt;generating&lt;/em&gt; use for word patterns. It turns out you can generate the word sequences that match your word patterns. The word patterns gives you the rules for doing that generation. Sometimes it can be so broad that the number of possible patterns you could generate would be too big for you to ever actually produce. But you can still generate a &lt;em&gt;sample&lt;/em&gt; of all these phrases or sentences. You might do this sometimes to generate a response from your chatbot.&lt;/p&gt;

&lt;p&gt;Now you just need a pattern specification language. Regular expressions work great for character patterns. But for word patterns we need to use something like &lt;code class=&quot;highlighter-rouge&quot;&gt;SpaCy&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Lark&lt;/code&gt;. The NLPIA book talks a log about &lt;code class=&quot;highlighter-rouge&quot;&gt;SpaCy&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Lark&lt;/code&gt; uses the &lt;a href=&quot;https://www.wikiwand.com/en/Extended_Backus%E2%80%93Naur_form&quot;&gt;EBNF&lt;/a&gt; (Extended Backus Naur Form) syntax and that’s the syntax used by Python’s own parser generator (interpreter). Frederico Tomassetti has a pretty awesome and &lt;a href=&quot;https://tomassetti.me/parsing-in-python/&quot;&gt;thorough explanation&lt;/a&gt; of all your options. Here, you’re just going to learn about &lt;code class=&quot;highlighter-rouge&quot;&gt;Lark&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s a paraphrasing of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Lark&lt;/code&gt; documentation for what a word pattern looks like:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rule_name : list of rules and {terminal_name}s to match
          | another possible list of items
          | ...

terminal_name: &quot;token&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here’s the first line of the python parser generator EBNF grammar:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-lark&quot;&gt;single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That looks like it might be compatible with the Lark parser generator. It’s pretty simple, basically a valid statement can be a blank line (only a &lt;code class=&quot;highlighter-rouge&quot;&gt;NEWLINE&lt;/code&gt;), or it can be a &lt;code class=&quot;highlighter-rouge&quot;&gt;simple_stmnt&lt;/code&gt; (defined further down in the grammar), or it can be a &lt;code class=&quot;highlighter-rouge&quot;&gt;compound_stmt&lt;/code&gt; (also defined further down) that combines a bunch of &lt;code class=&quot;highlighter-rouge&quot;&gt;simple_stmt&lt;/code&gt; phrases and terminates them with a NEWLINE.&lt;/p&gt;

&lt;p&gt;Here’s the EBNF word pattern from a &lt;a href=&quot;https://github.com/lark-parser/lark/blob/master/docs/json_tutorial.md&quot;&gt;lark tutorial&lt;/a&gt; on using Lark to match another syntax you might be familiar with, &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-lark&quot;&gt;value: dict
     | list
     | STRING
     | NUMBER
     | &quot;true&quot; | &quot;false&quot; | &quot;null&quot;

list : &quot;[&quot; [value (&quot;,&quot; value)*] &quot;]&quot;

dict : &quot;{&quot; [pair (&quot;,&quot; pair)*] &quot;}&quot;
pair : STRING &quot;:&quot; value

%import common.ESCAPED_STRING   -&amp;gt; STRING
%import common.SIGNED_NUMBER    -&amp;gt; NUMBER
%import common.WS
%ignore WS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be sure to &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install lark-parser&lt;/code&gt; &lt;strong&gt;NOT&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;lark&lt;/code&gt;! The &lt;a href=&quot;https://pypi.org/project/lark/&quot;&gt;PyPi package &lt;code class=&quot;highlighter-rouge&quot;&gt;lark&lt;/code&gt;&lt;/a&gt; is only for transforming HTML into redis requests. The &lt;a href=&quot;https://pypi.org/project/lark-parser/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lark-parser&lt;/code&gt; package&lt;/a&gt; package is the one you want.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lark&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lark&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;json_parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&quot;&quot;&quot;
    value: dict
         | list
         | ESCAPED_STRING
         | SIGNED_NUMBER
         | &quot;true&quot; | &quot;false&quot; | &quot;null&quot;

    list : &quot;[&quot; [value (&quot;,&quot; value)*] &quot;]&quot;

    dict : &quot;{&quot; [pair (&quot;,&quot; pair)*] &quot;}&quot;
    pair : ESCAPED_STRING &quot;:&quot; value

    &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;import common.ESCAPED_STRING
    &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;import common.SIGNED_NUMBER
    &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;import common.WS
    &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ignore WS

    &quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'value'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s pretty nifty. Only a few lines to define a pattern that can match a pretty wide range of documents (all the valid JSON strings out there).&lt;/p&gt;

&lt;p&gt;Let’s try it out:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'[{&quot;key&quot;: &quot;value&quot;}, {&quot;ans&quot;: 42}]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ESCAPED_STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&quot;key&quot;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ESCAPED_STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&quot;value&quot;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])])])]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ESCAPED_STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&quot;ans&quot;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGNED_NUMBER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'42'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])])])])])])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nice! Now if only I could turn that back into a nice pretty-printable string with indentation.&lt;/p&gt;

</description>
        <pubDate>Tue, 12 Feb 2019 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/Word-Patterns/</link>
        <guid isPermaLink="true">http://localhost:4000/Word-Patterns/</guid>
      </item>
    
      <item>
        <title>Word Patterns</title>
        <description>&lt;p&gt;Word patterns are what you can use to match or generate phrases. They’re usually called grammars, in math and computer science courses. But this post is about word grammars rather than character grammars. And the word grammar means something very precise to a lot of people, so I don’t want to step on any toes by using the word incorrectly. So I’ll just talk about word patterns.&lt;/p&gt;

&lt;p&gt;Word patterns work best on short, focused text documents, so I’m going to talk about word patterns for sentences, sometimes called &lt;em&gt;phrase structure grammars&lt;/em&gt; (PSGs).&lt;/p&gt;

&lt;p&gt;And word patterns are useful for 2 things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;matching&lt;/li&gt;
  &lt;li&gt;generating&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;em&gt;matching&lt;/em&gt; part is mostly used to extract information, like a name, date, or serial number. It can also be used to measure well-formedness (grammatical correctness), but that can be hard. It’s hard to compose formal grammar rules that capture all the possible well-formed sentences without accidentally including some bad sentences. Natural language grammars depend on the meaning of words. And that isn’t easily captured in formal word patterns. The matching part can also be used to &lt;em&gt;search&lt;/em&gt; within a lot of sentences to narrow your sentences down to a few that match your pattern and use that to make some decisions, like what your chatbot should say in response.&lt;/p&gt;

&lt;p&gt;That brings us to the &lt;em&gt;generating&lt;/em&gt; use for word patterns. It turns out you can generate the word sequences that match your word patterns. The word patterns gives you the rules for doing that generation. Sometimes it can be so broad that the number of possible patterns you could generate would be too big for you to ever actually produce. But you can still generate a &lt;em&gt;sample&lt;/em&gt; of all these phrases or sentences. You might do this sometimes to generate a response from your chatbot.&lt;/p&gt;

&lt;p&gt;Now you just need a pattern specification language. Regular expressions work great for character patterns. But for word patterns we need to use something like &lt;code class=&quot;highlighter-rouge&quot;&gt;SpaCy&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Lark&lt;/code&gt;. The NLPIA book talks a log about &lt;code class=&quot;highlighter-rouge&quot;&gt;SpaCy&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Lark&lt;/code&gt; uses the &lt;a href=&quot;https://www.wikiwand.com/en/Extended_Backus%E2%80%93Naur_form&quot;&gt;EBNF&lt;/a&gt; (Extended Backus Naur Form) syntax and that’s the syntax used by Python’s own parser generator (interpreter). Frederico Tomassetti has a pretty awesome and &lt;a href=&quot;https://tomassetti.me/parsing-in-python/&quot;&gt;thorough explanation&lt;/a&gt; of all your options. Here, you’re just going to learn about &lt;code class=&quot;highlighter-rouge&quot;&gt;Lark&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s a paraphrasing of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Lark&lt;/code&gt; documentation for what a word pattern looks like:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rule_name : list of rules and {terminal_name}s to match
          | another possible list of items
          | ...

terminal_name: &quot;token&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here’s the first line of the python parser generator EBNF grammar:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-lark&quot;&gt;single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That looks like it might be compatible with the Lark parser generator. It’s pretty simple, basically a valid statement can be a blank line (only a &lt;code class=&quot;highlighter-rouge&quot;&gt;NEWLINE&lt;/code&gt;), or it can be a &lt;code class=&quot;highlighter-rouge&quot;&gt;simple_stmnt&lt;/code&gt; (defined further down in the grammar), or it can be a &lt;code class=&quot;highlighter-rouge&quot;&gt;compound_stmt&lt;/code&gt; (also defined further down) that combines a bunch of &lt;code class=&quot;highlighter-rouge&quot;&gt;simple_stmt&lt;/code&gt; phrases and terminates them with a NEWLINE.&lt;/p&gt;

&lt;p&gt;Here’s the EBNF word pattern from a &lt;a href=&quot;https://github.com/lark-parser/lark/blob/master/docs/json_tutorial.md&quot;&gt;lark tutorial&lt;/a&gt; on using Lark to match another syntax you might be familiar with, &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-lark&quot;&gt;value: dict
     | list
     | STRING
     | NUMBER
     | &quot;true&quot; | &quot;false&quot; | &quot;null&quot;

list : &quot;[&quot; [value (&quot;,&quot; value)*] &quot;]&quot;

dict : &quot;{&quot; [pair (&quot;,&quot; pair)*] &quot;}&quot;
pair : STRING &quot;:&quot; value

%import common.ESCAPED_STRING   -&amp;gt; STRING
%import common.SIGNED_NUMBER    -&amp;gt; NUMBER
%import common.WS
%ignore WS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be sure to &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install lark-parser&lt;/code&gt; &lt;strong&gt;NOT&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;lark&lt;/code&gt;! The &lt;a href=&quot;https://pypi.org/project/lark/&quot;&gt;PyPi package &lt;code class=&quot;highlighter-rouge&quot;&gt;lark&lt;/code&gt;&lt;/a&gt; is only for transforming HTML into redis requests. The &lt;a href=&quot;https://pypi.org/project/lark-parser/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lark-parser&lt;/code&gt; package&lt;/a&gt; package is the one you want.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lark&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lark&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;json_parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&quot;&quot;&quot;
    value: dict
         | list
         | ESCAPED_STRING
         | SIGNED_NUMBER
         | &quot;true&quot; | &quot;false&quot; | &quot;null&quot;

    list : &quot;[&quot; [value (&quot;,&quot; value)*] &quot;]&quot;

    dict : &quot;{&quot; [pair (&quot;,&quot; pair)*] &quot;}&quot;
    pair : ESCAPED_STRING &quot;:&quot; value

    &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;import common.ESCAPED_STRING
    &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;import common.SIGNED_NUMBER
    &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;import common.WS
    &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ignore WS

    &quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'value'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s pretty nifty. Only a few lines to define a pattern that can match a pretty wide range of documents (all the valid JSON strings out there).&lt;/p&gt;

&lt;p&gt;Let’s try it out:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'[{&quot;key&quot;: &quot;value&quot;}, {&quot;ans&quot;: 42}]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ESCAPED_STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&quot;key&quot;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ESCAPED_STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&quot;value&quot;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])])])]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ESCAPED_STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&quot;ans&quot;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGNED_NUMBER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'42'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])])])])])])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nice! Now if only I could turn that back into a nice pretty-printable string with indentation. ;-)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pretty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&quot;key&quot;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;	&lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&quot;ans&quot;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;	&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 12 Feb 2019 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/Grammars-and-Patterns/</link>
        <guid isPermaLink="true">http://localhost:4000/Grammars-and-Patterns/</guid>
      </item>
    
      <item>
        <title>Infinite-vocabulary word embeddings</title>
        <description>&lt;p&gt;Word embeddings are at the core of the most impressive natural language models. Dialog systems, abstractive summarizers, universal sentence embeddings, question answering systems and even unsupervised knowledge extraction  engines all rely on broad vocabularies of word embeddings. But even the 1M word vocabulary of Word2vec and GloVE embeddings isn’t broad enough to solve the most useful challenges for natural language processing, such as medical record summarization, or even dialog engines that can handle the ever expanding vocabulary of teenagers.&lt;/p&gt;

&lt;p&gt;Examples of architectures built on top of the wordvector foundation&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CNNs&lt;/li&gt;
  &lt;li&gt;LSTMs&lt;/li&gt;
  &lt;li&gt;GRUs&lt;/li&gt;
  &lt;li&gt;GANS&lt;/li&gt;
  &lt;li&gt;encoder-decoder&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It may be possible to keep NLP pipelines up to speed on the ever changing and mistaken world of human language with online incremental learning of word embeddings. An initial seed of word embeddings can be perpetually refined to continually improve the precision of existing embeddings to match a particular domain’s use of words (such as medical texts). In addition, new tokens can be added to the vocabulary as they become commonplace in communication among multiple people. This can be accomplished with a simple hybrid architecture of character-based LSTM models with the feedforward (fully-connected) network required for the embedding vector.&lt;/p&gt;

&lt;p&gt;Word vectors gave us embeddings that capture the meaning of individual words. Sentence encoders built on that foundation by giving us nonlinear embeddings of short word vector sequences. These thought vectors extract much more of the meaning left behind by linear combinations word vectors. But some important chunks of meaning are invisible to this high level representation of meaning and thought. When new words are encountered they must be treated as blanks or approximated with other word vectors. The most effective approach developed to date has been to simple select a random word vector from your vocabulary to represent the new word. This noise minimizes the discontinuity in the encoder’s learned model of the thought within a sentence.&lt;/p&gt;

&lt;p&gt;We propose a more thoughtful encoding new words into a word vector. We propose to &lt;strong&gt;learn&lt;/strong&gt; a character sequence encoding that generates word vectors. And we suggest that employing existing word vector representations to represent the new words to give the character-based model a head start on learning the semantics of character sequences.&lt;/p&gt;

&lt;p&gt;One logistics challenge when training character-based encodings of words is similar to the challenge faced when generating skip-grams for the original training of word vectors. Statistics of word usage must be used to optimize the selection of token boundaries, particularly for compound words and optimal n-grams that minimize the loss of information resulting from this windowing of character sequences. For a character-based model that does not depend upon tokenizers for this windowing, it is particularly critical. The character-based model will also learn the boundaries of tokens from the tokenizer that was used to train the original word vectors. And this model can be used to continue segmenting unfamiliar sequences of characters into tokens that capture comparable amounts of meaning, thought.&lt;/p&gt;

&lt;p&gt;Once this character-based word vector encoder can predict word vectors boundaries and the word vectors themselves with sufficient accuracy it can be unleashed from the original word vector vocabulary. Dealing with semantic drift of the word vectors as well as the tokenizer may be a detriment or desirable flexibility of the new approach.
Our algorithm can encode new words and find new compound words while simultaneously incrementally adjusting the “legacy” word vectors.&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Feb 2019 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/Word-Embeddings-for-mispelled-words/</link>
        <guid isPermaLink="true">http://localhost:4000/Word-Embeddings-for-mispelled-words/</guid>
      </item>
    
      <item>
        <title>SSH Server On Office PC Behind Building's NAT Router</title>
        <description>&lt;p&gt;Say you’re leasing space in an office building for your startup and you share the network with all the other tennants. This could be a wireless router or hard-wired ethernet router. The problem is you don’t have the password for the admin page on that router. So you can’t expose a port on your server for ssh or webhosting or whatever. 
Normally you’d just add a port-forwarding rule on the router to send 22 and 80 and 443 all through to your server. But that might mess up somebody else using the same router to serve up &lt;strong&gt;their&lt;/strong&gt; page.&lt;/p&gt;

&lt;p&gt;So you need to set up an ssh tunnel (actually a reverse tunnel) to a server (an ssh relay server) outside your LAN. It needs to have a public IP so you need to have control of the router or port forwarding on that relay server. This could be your home internet wifi router connected a GPU doing ML training for your &lt;a href=&quot;springboard.com&quot;&gt;Springboard.com&lt;/a&gt; and &lt;a href=&quot;https://totalgood.com&quot;&gt;totalgood.com&lt;/a&gt; mentees and serving up your experimental &lt;a href=&quot;http://gpu.totalgood.org/&quot;&gt;Django apps&lt;/a&gt;. You’re probably using NAT port forwarding like we talked about in &lt;a href=&quot;2019-01-04-Nginx-webserver-network-configuration.md&quot;&gt;Nginx Webserver Network Configuration&lt;/a&gt; last month.&lt;/p&gt;

&lt;p&gt;So now we can use our home GPU as a relay for our office GPU tunnel to the outside world. So I came across this &lt;a href=&quot;http://xmodulo.com/access-linux-server-behind-nat-reverse-ssh-tunnel.html&quot;&gt;blog post&lt;/a&gt; and added a few other firewall steps from &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/ufw-essentials-common-firewall-rules-and-commands&quot;&gt;here&lt;/a&gt;. As usual, we don’t use port 22 for ssh, just to reduce script kiddie discovery of the ssh service on our ISP’s public IP for my home router.&lt;/p&gt;

&lt;p&gt;First log onto your office server that you want to expose an ssh port on through the NAT router for the office building. You can do this directly if you have a keyboard, monitor, and chair connected to the office server. Or you can use TeamViewer or any other remote control application. Once you’ve logged onto the office server,open an SSH connection to your home ssh relay server and keep the connection open permanently:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;officeserver~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-N&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; 9923:localhost:9922 relayuser@1.2.3.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here the port 9923 is any arbitrary port number that you chose. It only needs to be accessible from within your home relay server like &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh relayuser@localhost -p 9923&lt;/code&gt;. Just make sure that this port is not used by other programs on your home relay server at the public IP address &lt;code class=&quot;highlighter-rouge&quot;&gt;1.2.3.4&lt;/code&gt;.  Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;1.2.3.4&lt;/code&gt; with your relay server’s public IP which you can find out with &lt;code class=&quot;highlighter-rouge&quot;&gt;relayserver~$ curl ifconfig.co&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Port 9922 in the command above must be the port that your office computer behind the firewall is listening to with the sshd. Normally this will be port 22, unless you’re trying to hide from script kiddies within your office building LAN.  You can set/check this port in the ssh daemon config file with &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo nano /etc/ssh/sshd_config&lt;/code&gt;. Don’t forget to restart the sshd service if you change this port: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo service sshd restart&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;reload&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-R&lt;/code&gt; option defines a reverse tunnel. It forwards any traffic that it receives on port 9923 on the office pc to the home relay server on port 9922. This will be all the stdout flowing back to your external ssh connection.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-N&lt;/code&gt; option ensures that SSH doesn’t execute a remote command, like it normally would. This forces it to just relay (tunnel) traffic to the requested IP address and port.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; option SSH will send the ssh process to the background immediately, before it sets up the tunnel or executes a remote command, which we prevented with &lt;code class=&quot;highlighter-rouge&quot;&gt;-N&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So when you run that command you should immediately return to the shell prompt and you can see your background ssh tunnel process on the office server with:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;officeserver~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ps aux | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ssh\ \-f'&lt;/span&gt;
officeuser     13519  0.0  0.0  49052   716 ?        Ss   13:23   0:00 ssh &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-N&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; 9923:localhost:9922 relayuser@1.2.3.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;officeserver~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;netstat &lt;span class=&quot;nt&quot;&gt;-nap&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;9922
tcp        0      0 0.0.0.0:9922           0.0.0.0:&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;               LISTEN      13057/sshd      
tcp6       0      0 :::9922                :::&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;                    LISTEN      13057/sshd    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So now you can log into the home relay server like you normally do with ssh. After that you can then access the office server by &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt;ing to localhost on the tunneling port (the port on the left-hand side of the reverse tunnel command you ran on the office computer):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;relayserver~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 9923 officeuser@localhost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you’ll have to use your officeuser password to log onto the officeserver through the tunnel, until you set up a ~/.ssh/config file with the appropriate keys for passwordless login.&lt;/p&gt;

&lt;h2 id=&quot;automatic-relay-server-login-and-passthrough&quot;&gt;Automatic Relay Server Login and Passthrough&lt;/h2&gt;

&lt;p&gt;Unfortunately with the manual tunneling you set up you have to ssh twice: first to relayserver, and then to officeserver through the relayserver localhost. But it’s possible to let your ssh daemon on your home relayserver forward a port from an external host, like your laptop. This is achieved by specifying &lt;code class=&quot;highlighter-rouge&quot;&gt;GatewayPorts&lt;/code&gt; configuration options in the ssh server running on relayserver:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;relayserver~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;GatewayPorts clientspecified&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tee /etc/ssh/sshd_conf
relayserver~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service sshd restart  &lt;span class=&quot;c&quot;&gt;# or reload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 01 Feb 2019 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/SSH-Server-On-Office-PC-Behind-Building-NAT-Router/</link>
        <guid isPermaLink="true">http://localhost:4000/SSH-Server-On-Office-PC-Behind-Building-NAT-Router/</guid>
      </item>
    
      <item>
        <title>Data Science Trends</title>
        <description>&lt;p&gt;&lt;a href=&quot;springboard.com&quot;&gt;Springboard&lt;/a&gt; &lt;em&gt;Data Science Careers&lt;/em&gt; students keep asking me which specialization they should pursue. And they often want to know which specialization are most likely to hire a junior data science coming out of Springboard. I try to encourage my students to pursue something that they are good at, because there will always be a market for someone who is good at what they do. But if you really want to follow the crowd and go where the employers are hiring check out the &lt;a href=&quot;aiindex.org&quot;&gt;AIIndex.org&lt;/a&gt; 2018 report. It looks like NLP was popular in 2016 and 2017 but may be overtaken by computer vision and “deep learning” by 2020. This roughly corresponds to the widespread deployment of self-driving cars, which will eventually replace apoproximately 10% of the US workforce with machines. And those driving and logistics jobs have been “transformed” into data science jobs over the past few years. So if you’re a full time Lyft Driver, now might be a good time to start taking night classes in Data Science and getting reconnected to your nerdy friends.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/DS-job-growth-by-specialty.png&quot;&gt;&lt;img src=&quot;/images/DS-job-growth-by-specialty.png&quot; alt=&quot;AIIndex DS Job Trends&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Jan 2019 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/data-science-job-trends/</link>
        <guid isPermaLink="true">http://localhost:4000/data-science-job-trends/</guid>
      </item>
    
      <item>
        <title>Nginx web server setup</title>
        <description>&lt;p&gt;Each time I have to set up a domain name service table or database access for a web server server I forget how to do it. And there doesn’t seem to be a good online guide for it. So here are my notes.&lt;/p&gt;

&lt;h2 id=&quot;dns-records&quot;&gt;DNS Records&lt;/h2&gt;

&lt;p&gt;I use namecheap and AWS as my registrar and sometimes I set up a domain to point from namecheap to AWS to handle the actual DNS records.&lt;/p&gt;

&lt;h2 id=&quot;appoach-1-namecheap-only&quot;&gt;Appoach 1: &lt;a href=&quot;namecheap.com&quot;&gt;Namecheap&lt;/a&gt; Only&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Log onto namecheap.&lt;/li&gt;
  &lt;li&gt;Click on the “DomainList” tab&lt;/li&gt;
  &lt;li&gt;Click on the “Manage” button next the one you want to configure&lt;/li&gt;
  &lt;li&gt;Find the “Advanced DNS” tab to the upper right&lt;/li&gt;
  &lt;li&gt;Set up your records to look like this:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;A Record&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{WIFI_ROUTER_IP_ADDRESS}&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;TTL&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;20 min (or Automatic)&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;A Record &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gpu&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{WIFI_ROUTER_IP_ADDRESS}&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;TTL&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;20 min (or Automatic)&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;A Record &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;www&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{WIFI_ROUTER_IP_ADDRESS}&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;TTL&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;20 min (or Automatic)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And on the NETGEAR wifi router console at 192.168.1.1 I set up Port Forwarding for ssh (custom port), http (80), https (443), and sometimes postgres (custom {PSQL_PORT} other than 5432) or the Django debug port (8000). Port Forwarding is on the &lt;a href=&quot;http://192.168.1.1/adv_index.htm&quot;&gt;advanced tab&lt;/a&gt; under the bottom left “Advanced Setup”, clicking on the menu item link/button midway down called “Port Forwarding / Port Triggering.”  Here are my LAN port forwarding settings:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
# 	Service Name 	ExternalStartPort	ExternalEndPort	InternalStartPort	InternalEndPort	InternalIPaddress
1	WEB	            80	                80	            80	                80	            {SERVER_LAN_IP_ADDRESS}
2	hhtps	        443	                443	            443	                443	            {SERVER_LAN_IP_ADDRESS}
3	pgwebadmin	    5050	            5050	        5050	            5050	        {SERVER_LAN_IP_ADDRESS}
4	postgres	    {PSQL_PORT}	        {PSQL_PORT}	    {PSQL_PORT}	        {PSQL_PORT}	    {SERVER_LAN_IP_ADDRESS}
5	django debug	8000	            8000	        8000	            8000	        {SERVER_LAN_IP_ADDRESS}
6	gunicorn proxy	{GUNICORN_PORT}     {GUNICORN_PORT} {GUNICORN_PORT}     {GUNICORN_PORT} {SERVER_LAN_IP_ADDRESS}
7	ssh	            {SSH_PORT}	        {SSH_PORT}	    {SSH_PORT}	        {SSH_PORT}	    {SERVER_LAN_IP_ADDRESS}
&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;nginx&quot;&gt;NGINX&lt;/h2&gt;

&lt;p&gt;And then my nginx conf file in /etc/nginx/sites-enabled/django_app_name.conf on the server looks like this:&lt;/p&gt;

&lt;div class=&quot;language-config highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;;
    &lt;span class=&quot;n&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gpu&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;totalgood&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt; {&lt;span class=&quot;n&quot;&gt;WIFI_ROUTER_IP_ADDRESS&lt;/span&gt;} {&lt;span class=&quot;n&quot;&gt;SERVER_LAN_IP_ADDRESS&lt;/span&gt;} &lt;span class=&quot;m&quot;&gt;127&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;;
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; / {
        &lt;span class=&quot;n&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;://&lt;span class=&quot;m&quot;&gt;127&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;:{&lt;span class=&quot;n&quot;&gt;GUNICORN_PORT&lt;/span&gt;};
    }
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; /&lt;span class=&quot;n&quot;&gt;static&lt;/span&gt;/ {
        &lt;span class=&quot;n&quot;&gt;autoindex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;;
        &lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; /&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;knowledgequest&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;collected_static&lt;/span&gt;/;
    }
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; /&lt;span class=&quot;n&quot;&gt;robots&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt; {
        &lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; /&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;knowledgequest&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;collected_static&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;robots&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;txt&lt;/span&gt;;
    }
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; /&lt;span class=&quot;n&quot;&gt;favicon&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;ico&lt;/span&gt; {
        &lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; /&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;knowledgequest&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;collected_static&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;favicon&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;ico&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;postgres&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;postgres&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;And the postgres db setup script looks like this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sqlalchemy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_engine&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;DEFAULT_ENVIRON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;POSTGRES_KNOWLEDGEQUEST_DB_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'knowledgequest'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;POSTGRES_KNOWLEDGEQUEST_DB_USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'kq'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;POSTGRES_KNOWLEDGEQUEST_DB_PW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'{:5g}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))),&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;CREATEDB_SQL_TEMPLATE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    CREATE DATABASE {POSTGRES_KNOWLEDGEQUEST_DB_NAME};
    CREATE USER {POSTGRES_KNOWLEDGEQUEST_DB_USERNAME} WITH PASSWORD '{POSTGRES_KNOWLEDGEQUEST_DB_PW}';
    ALTER ROLE {POSTGRES_KNOWLEDGEQUEST_DB_USERNAME} SET client_encoding TO 'utf8';
    ALTER ROLE {POSTGRES_KNOWLEDGEQUEST_DB_USERNAME} SET default_transaction_isolation TO 'read committed';
    ALTER ROLE {POSTGRES_KNOWLEDGEQUEST_DB_USERNAME} SET timezone TO 'UTC';
    GRANT ALL PRIVILEGES ON DATABASE knowledgequest TO {POSTGRES_KNOWLEDGEQUEST_DB_USERNAME};
    &quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute_sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'postgres://postgres@/postgres'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CREATEDB_SQL_TEMPLATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot; Based on stackoverflow.com/a/8977109/623735 -- create a postgres database using sqlalchemy &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DEFAULT_ENVIRON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;splitlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'sqlite:///enron_emails.db'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;commit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# can't create a database from withing a transaction, so close the current transaction with a commit&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'SQL: {}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;commit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# commit each transaction individually&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'RESULT TABLE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'------------'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'------------'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;execute_sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;secrets&quot;&gt;Secrets&lt;/h2&gt;

&lt;p&gt;I keep secret network configuration settings in a shell script run by &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt; so that they are always in environment variables I can use with &lt;code class=&quot;highlighter-rouge&quot;&gt;envsubst&lt;/code&gt; in bash or &lt;code class=&quot;highlighter-rouge&quot;&gt;.format()&lt;/code&gt; string interpolation in a python app.&lt;/p&gt;
</description>
        <pubDate>Fri, 04 Jan 2019 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/Nginx-webserver-network-configuration/</link>
        <guid isPermaLink="true">http://localhost:4000/Nginx-webserver-network-configuration/</guid>
      </item>
    
      <item>
        <title>Raspberry Pi Camera Configuration</title>
        <description>&lt;p&gt;I’ll eventually figure out where I put my notes on configuring a Raspberry Pi camera for streaming video and offline object detection.  But for now, check out the &lt;a href=&quot;https://github.com/DT42/BerryNet&quot;&gt;BerryNet&lt;/a&gt; repo. These guys have done it right!&lt;/p&gt;

&lt;h2 id=&quot;berrynet&quot;&gt;BerryNet&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;any camera compatible with your OS and PC&lt;/li&gt;
  &lt;li&gt;CPU, GPU options:
    &lt;ul&gt;
      &lt;li&gt;rPi 3 B+, movidius&lt;/li&gt;
      &lt;li&gt;NVIDIA Tx2&lt;/li&gt;
      &lt;li&gt;Intel NUC&lt;/li&gt;
      &lt;li&gt;basically any SBC or linux PC hardware you can dream up&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;deeplens&quot;&gt;DeepLens&lt;/h2&gt;

&lt;p&gt;From a novice computer vision engineer, Amazon’s Deep Lens is the system to beat. But you’d have to do some hacking to get into the OS and customize it without breaking all the cloud integration that Amazon has infected the NUC with.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Intel NUC&lt;/li&gt;
  &lt;li&gt;1080p video camera&lt;/li&gt;
  &lt;li&gt;optimized for mxnet&lt;/li&gt;
  &lt;li&gt;turnkey integration with AWS services like Lambda and GreenGrass&lt;/li&gt;
  &lt;li&gt;streaming video (over WiFi)&lt;/li&gt;
  &lt;li&gt;some Vendor lock&lt;/li&gt;
  &lt;li&gt;power?&lt;/li&gt;
  &lt;li&gt;OS?&lt;/li&gt;
  &lt;li&gt;flops? RAM?&lt;/li&gt;
  &lt;li&gt;GPU flops? RAM?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;google-vision-kit&quot;&gt;Google Vision Kit&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;connectivity: micro USB only&lt;/li&gt;
  &lt;li&gt;GPU: movidius&lt;/li&gt;
  &lt;li&gt;low res camera, IR cameras available&lt;/li&gt;
  &lt;li&gt;CPU: rpi zero ? Flops, 500MB RAM&lt;/li&gt;
  &lt;li&gt;OS: raspbian&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;blink&quot;&gt;Blink&lt;/h2&gt;

&lt;p&gt;This isn’t one you can hack around with, but it’s the only wireless camera option. Similar to Wyze cam.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Power: camera 2xAA lithium batteries (2yr life) or microusb power, WiFi synchub needs AC-DC 5V converter&lt;/li&gt;
  &lt;li&gt;Size: 71x71x30 mm&lt;/li&gt;
  &lt;li&gt;Weight: .07 kg&lt;/li&gt;
  &lt;li&gt;CPU: Immedia Proprietary - ISI108, 4 / 100Mhz.&lt;/li&gt;
  &lt;li&gt;Connectivity: Wi-Fi with diversity 2.4 Ghz 802.11g/n but not ad-hoc&lt;/li&gt;
  &lt;li&gt;camera: 720p HD, 30 fps for 5 s clips, mono audio&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 01 Jan 2019 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/Rasberry-Pi-Camera-Configuration/</link>
        <guid isPermaLink="true">http://localhost:4000/Rasberry-Pi-Camera-Configuration/</guid>
      </item>
    
      <item>
        <title>Open Source Teleprompter?</title>
        <description>&lt;p&gt;I’m recording some instructional videos for a &lt;em&gt;&lt;a href=&quot;https://bit.ly/nlpiabook&quot;&gt;Natural Language Processing In Motion&lt;/a&gt;&lt;/em&gt; course for &lt;a href=&quot;https://manning.com&quot;&gt;Manning Publishing&lt;/a&gt; and maybe a &lt;a href=&quot;https://extension.ucsd.edu/courses-and-programs/healthcare-informatics&quot;&gt;Data Science for Healthcare&lt;/a&gt; course for UCSD. I tried using Camtasia to simultaneously record the slides on one monitor and the talking head (webcam). And I tried using a Libre Office in presentation mode to show the slides/animations on my laptop screen and read from the external display (slide notes). But in display mode Libre Office puts the notes to the right in the middle of the screen and my eyes weren’t looking at the camera. Is there a better way to set up a “teleprompter” and webcam so that the top line is always near the webcam? I’d prefer open source and free or low cost.&lt;/p&gt;

&lt;p&gt;Or maybe this would be a good NLP project for someone? I’d be happy to help. We could add it to the &lt;a href=&quot;https://nlpia.org&quot;&gt;NLPIA package&lt;/a&gt; to give it exposure and get help from &lt;a href=&quot;https://bit.ly/nlpiabook&quot;&gt;NLPIA readers&lt;/a&gt;. You’d need a good STT engine with low latency.&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Dec 2018 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/Teleprompter-for-video-course/</link>
        <guid isPermaLink="true">http://localhost:4000/Teleprompter-for-video-course/</guid>
      </item>
    
      <item>
        <title>Poetix</title>
        <description>&lt;p&gt;A big thanks to &lt;a href=&quot;https://www.linkedin.com/in/philip-baldwin-1658905/&quot;&gt;Philip R. Baldwin&lt;/a&gt; for sharing this clever &lt;a href=&quot;https://youtu.be/wUFflUsK7Dw&quot;&gt;AI-generated sonnet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It’s one of the winners of Dartmouth’s Poetix competition.&lt;/p&gt;

&lt;p&gt;It’s pretty funny, and not completely irrelevant to the sense that we’re all being “dumbe down” down by the Intenet and AI, as they take over more and more of our intellectual chores.&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Dec 2018 00:00:00 -0800</pubDate>
        <link>http://localhost:4000/Poetix/</link>
        <guid isPermaLink="true">http://localhost:4000/Poetix/</guid>
      </item>
    
      <item>
        <title>Sentence Embedding</title>
        <description>&lt;p&gt;Sentence embeddings took off in 2017. When Google released their &lt;a href=&quot;https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/46808.pdf&quot;&gt;Universal Sentence Encoder last year&lt;/a&gt; researchers took notice. Google trained their sentence embedding on a massive corpus of text, everything from wikipedia and news articles to FAQs and forums. And then they refined the accuracy by training it on the Stanford Natural Language Inference corpus. Like word2vec, this enabled NLP enthusiasts to leverage Google’s text-scraping and cleaning infrastructure to build their own models using transfer learning. Transfer Learning is just a fancy way by using one model within another. Usually you’re just doing “activation” or “inference” with the pretrained model and then using its output as a feature (input) for some other model.&lt;/p&gt;

&lt;p&gt;So is this new embedding any better than the other options? John Christian Fjellestad compiled a nice summary of many of the options, to which I’ve added the “naive” versions at the top of the lists here. So these lists should progress from earlier to more recent techniques and from less advanced to more advanced.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;naive word vector embedding &lt;a href=&quot;https://github.com/totalgood/nlpia/blob/master/src/nlpia/book/examples/ch06.py&quot;&gt;sum&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;normalized mean of word embeddings: &lt;a href=&quot;https://github.com/totalgood/nlpia/blob/master/src/nlpia/book/examples/ch06.py&quot;&gt;subtract principal eigenvector&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;thought vectors (LSTM-based word vector autoencoder)&lt;/li&gt;
  &lt;li&gt;skip thought vectors (next sentence prediction)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://openreview.net/forum?id=rJvJXZb0W&quot;&gt;Quick-thoughts&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And you also have to choose a good word embedding:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Word2Vec&lt;/li&gt;
  &lt;li&gt;GloVE&lt;/li&gt;
  &lt;li&gt;FastText&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://allennlp.org/elmo&quot;&gt;ELMo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To do that you need some measure of &lt;strong&gt;good&lt;/strong&gt; for your machine learning problem. Fortunately John Fjellestad has coded some machine learning problems that are great for generic &lt;strong&gt;goodness&lt;/strong&gt; of a sentence embedding for various problems:&lt;/p&gt;

</description>
        <pubDate>Thu, 01 Nov 2018 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/Sentence-Embedding/</link>
        <guid isPermaLink="true">http://localhost:4000/Sentence-Embedding/</guid>
      </item>
    
  </channel>
</rss>